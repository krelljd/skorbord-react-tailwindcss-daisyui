openapi: 3.0.0
info:
  title: Skorbord Cards API
  description: API for managing cards in the Skorbord application
  version: 1.0.0
  contact:
    name: Skorbord Development Team
    url: https://cards.skorbord.app
servers:
  - url: http://localhost:2424
    description: Development server
  - url: https://cards.skorbord.app
    description: Production server

paths:
  /api/health:
    get:
      summary: Health check endpoint
      description: Returns the health status of the API
      tags:
        - Health
      responses:
        '200':
          description: API is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "healthy"
                  timestamp:
                    type: string
                    format: date-time

  /api/cards:
    get:
      summary: Get all cards
      description: Retrieve a list of all cards
      tags:
        - Cards
      parameters:
        - name: page
          in: query
          description: Page number for pagination
          required: false
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          description: Number of items per page
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
      responses:
        '200':
          description: List of cards
          content:
            application/json:
              schema:
                type: object
                properties:
                  cards:
                    type: array
                    items:
                      $ref: '#/components/schemas/Card'
                  pagination:
                    $ref: '#/components/schemas/Pagination'

    post:
      summary: Create a new card
      description: Create a new card with the provided data
      tags:
        - Cards
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCardRequest'
      responses:
        '201':
          description: Card created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Card'
        '400':
          description: Invalid request data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/cards/{id}:
    get:
      summary: Get a card by ID
      description: Retrieve a specific card by its ID
      tags:
        - Cards
      parameters:
        - name: id
          in: path
          required: true
          description: Card ID
          schema:
            type: integer
      responses:
        '200':
          description: Card details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Card'
        '404':
          description: Card not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    put:
      summary: Update a card
      description: Update an existing card with new data
      tags:
        - Cards
      parameters:
        - name: id
          in: path
          required: true
          description: Card ID
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateCardRequest'
      responses:
        '200':
          description: Card updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Card'
        '404':
          description: Card not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    delete:
      summary: Delete a card
      description: Delete a specific card by its ID
      tags:
        - Cards
      parameters:
        - name: id
          in: path
          required: true
          description: Card ID
          schema:
            type: integer
      responses:
        '204':
          description: Card deleted successfully
        '404':
          description: Card not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

components:
  schemas:
    Card:
      type: object
      properties:
        id:
          type: integer
          description: Unique identifier for the card
        name:
          type: string
          description: Name of the card
        description:
          type: string
          description: Description of the card
        type:
          type: string
          description: Type/category of the card
        rarity:
          type: string
          enum: [common, uncommon, rare, epic, legendary]
          description: Rarity level of the card
        cost:
          type: integer
          description: Cost to play the card
        attack:
          type: integer
          description: Attack value (for creature cards)
        health:
          type: integer
          description: Health value (for creature cards)
        image_url:
          type: string
          format: uri
          description: URL to the card image
        created_at:
          type: string
          format: date-time
          description: When the card was created
        updated_at:
          type: string
          format: date-time
          description: When the card was last updated

    CreateCardRequest:
      type: object
      required:
        - name
        - type
        - rarity
        - cost
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 100
        description:
          type: string
          maxLength: 500
        type:
          type: string
          minLength: 1
          maxLength: 50
        rarity:
          type: string
          enum: [common, uncommon, rare, epic, legendary]
        cost:
          type: integer
          minimum: 0
          maximum: 20
        attack:
          type: integer
          minimum: 0
          maximum: 50
        health:
          type: integer
          minimum: 1
          maximum: 50
        image_url:
          type: string
          format: uri

    UpdateCardRequest:
      type: object
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 100
        description:
          type: string
          maxLength: 500
        type:
          type: string
          minLength: 1
          maxLength: 50
        rarity:
          type: string
          enum: [common, uncommon, rare, epic, legendary]
        cost:
          type: integer
          minimum: 0
          maximum: 20
        attack:
          type: integer
          minimum: 0
          maximum: 50
        health:
          type: integer
          minimum: 1
          maximum: 50
        image_url:
          type: string
          format: uri

    Pagination:
      type: object
      properties:
        page:
          type: integer
          description: Current page number
        limit:
          type: integer
          description: Number of items per page
        total:
          type: integer
          description: Total number of items
        pages:
          type: integer
          description: Total number of pages

    Error:
      type: object
      properties:
        error:
          type: string
          description: Error message
        code:
          type: string
          description: Error code
        details:
          type: object
          description: Additional error details

tags:
  - name: Health
    description: Health check endpoints
  - name: Cards
    description: Card management endpoints
